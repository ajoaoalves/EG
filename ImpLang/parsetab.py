
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARRAY DO EQUAL FROM FUNC IDENTIFIER IF INT LBRACE LOG_OP LPAREN OPERATOR RBRACE REL_OP RETURN ROW RPAREN SEMICOLON SET STRING THEN TO TYPE_ARRAY TYPE_INT TYPE_SET TYPE_STRING WHILEannotation : inputs ROW outputs FUNC IDENTIFIER LBRACE body RBRACEinputs : input\n              | input inputsinput : TYPE_INT IDENTIFIER\n             | TYPE_STRING IDENTIFIER\n             | TYPE_SET IDENTIFIER\n             | TYPE_ARRAY IDENTIFIERoutputs : RETURN output\n               | RETURN output outputsoutput : TYPE_INT IDENTIFIER\n              | TYPE_STRING IDENTIFIER\n              | TYPE_SET IDENTIFIER\n              | TYPE_ARRAY IDENTIFIERbody : statement\n            | statement bodystatement : selection\n                 | repetition\n                 | assignmentselection : IF LPAREN condition RPAREN THEN actionrepetition : WHILE LPAREN condition RPAREN DO action\n                  | FROM IDENTIFIER EQUAL INT TO INT DO actioncondition : comparisoncomparison : expression REL_OP expression\n                  | comparison LOG_OP comparisonexpression : IDENTIFIER\n                  | INT\n                  | STRING\n                  | LPAREN expression RPAREN\n                  | expression OPERATOR expressionaction : assignment SEMICOLON\n              | LBRACE body RBRACEassignment : IDENTIFIER EQUAL expression SEMICOLON'
    
_lr_action_items = {'TYPE_INT':([0,3,10,11,12,13,15,],[4,4,-4,-5,-6,-7,18,]),'TYPE_STRING':([0,3,10,11,12,13,15,],[5,5,-4,-5,-6,-7,19,]),'TYPE_SET':([0,3,10,11,12,13,15,],[6,6,-4,-5,-6,-7,20,]),'TYPE_ARRAY':([0,3,10,11,12,13,15,],[7,7,-4,-5,-6,-7,21,]),'$end':([1,39,],[0,-1,]),'ROW':([2,3,9,10,11,12,13,],[8,-2,-3,-4,-5,-6,-7,]),'IDENTIFIER':([4,5,6,7,16,18,19,20,21,28,31,32,33,34,37,38,41,42,48,54,55,58,59,64,67,69,71,72,74,76,77,78,],[10,11,12,13,22,24,25,26,27,29,29,-16,-17,-18,43,44,44,44,44,-32,44,44,44,29,29,-19,29,-20,-30,29,-31,-21,]),'RETURN':([8,17,24,25,26,27,],[15,15,-10,-11,-12,-13,]),'FUNC':([14,17,23,24,25,26,27,],[16,-8,-9,-10,-11,-12,-13,]),'LBRACE':([22,64,67,76,],[28,71,71,71,]),'IF':([28,31,32,33,34,54,69,71,72,74,77,78,],[35,35,-16,-17,-18,-32,-19,35,-20,-30,-31,-21,]),'WHILE':([28,31,32,33,34,54,69,71,72,74,77,78,],[36,36,-16,-17,-18,-32,-19,36,-20,-30,-31,-21,]),'FROM':([28,31,32,33,34,54,69,71,72,74,77,78,],[37,37,-16,-17,-18,-32,-19,37,-20,-30,-31,-21,]),'EQUAL':([29,43,],[38,53,]),'RBRACE':([30,31,32,33,34,40,54,69,72,74,75,77,78,],[39,-14,-16,-17,-18,-15,-32,-19,-20,-30,77,-31,-21,]),'LPAREN':([35,36,38,41,42,48,55,58,59,],[41,42,48,48,48,48,48,48,48,]),'INT':([38,41,42,48,53,55,58,59,68,],[46,46,46,46,61,46,46,46,73,]),'STRING':([38,41,42,48,55,58,59,],[47,47,47,47,47,47,47,]),'SEMICOLON':([44,45,46,47,54,62,63,70,],[-25,54,-26,-27,-32,-29,-28,74,]),'OPERATOR':([44,45,46,47,51,56,62,63,66,],[-25,55,-26,-27,55,55,55,-28,55,]),'REL_OP':([44,46,47,51,62,63,],[-25,-26,-27,59,-29,-28,]),'RPAREN':([44,46,47,49,50,52,56,62,63,65,66,],[-25,-26,-27,57,-22,60,63,-29,-28,-24,-23,]),'LOG_OP':([44,46,47,50,62,63,65,66,],[-25,-26,-27,58,-29,-28,58,-23,]),'THEN':([57,],[64,]),'DO':([60,73,],[67,76,]),'TO':([61,],[68,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'annotation':([0,],[1,]),'inputs':([0,3,],[2,9,]),'input':([0,3,],[3,3,]),'outputs':([8,17,],[14,23,]),'output':([15,],[17,]),'body':([28,31,71,],[30,40,75,]),'statement':([28,31,71,],[31,31,31,]),'selection':([28,31,71,],[32,32,32,]),'repetition':([28,31,71,],[33,33,33,]),'assignment':([28,31,64,67,71,76,],[34,34,70,70,34,70,]),'expression':([38,41,42,48,55,58,59,],[45,51,51,56,62,51,66,]),'condition':([41,42,],[49,52,]),'comparison':([41,42,58,],[50,50,65,]),'action':([64,67,76,],[69,72,78,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> annotation","S'",1,None,None,None),
  ('annotation -> inputs ROW outputs FUNC IDENTIFIER LBRACE body RBRACE','annotation',8,'p_annotation','lang_sint.py',8),
  ('inputs -> input','inputs',1,'p_inputs','lang_sint.py',12),
  ('inputs -> input inputs','inputs',2,'p_inputs','lang_sint.py',13),
  ('input -> TYPE_INT IDENTIFIER','input',2,'p_input','lang_sint.py',17),
  ('input -> TYPE_STRING IDENTIFIER','input',2,'p_input','lang_sint.py',18),
  ('input -> TYPE_SET IDENTIFIER','input',2,'p_input','lang_sint.py',19),
  ('input -> TYPE_ARRAY IDENTIFIER','input',2,'p_input','lang_sint.py',20),
  ('outputs -> RETURN output','outputs',2,'p_outputs','lang_sint.py',27),
  ('outputs -> RETURN output outputs','outputs',3,'p_outputs','lang_sint.py',28),
  ('output -> TYPE_INT IDENTIFIER','output',2,'p_output','lang_sint.py',32),
  ('output -> TYPE_STRING IDENTIFIER','output',2,'p_output','lang_sint.py',33),
  ('output -> TYPE_SET IDENTIFIER','output',2,'p_output','lang_sint.py',34),
  ('output -> TYPE_ARRAY IDENTIFIER','output',2,'p_output','lang_sint.py',35),
  ('body -> statement','body',1,'p_body','lang_sint.py',42),
  ('body -> statement body','body',2,'p_body','lang_sint.py',43),
  ('statement -> selection','statement',1,'p_statement','lang_sint.py',47),
  ('statement -> repetition','statement',1,'p_statement','lang_sint.py',48),
  ('statement -> assignment','statement',1,'p_statement','lang_sint.py',49),
  ('selection -> IF LPAREN condition RPAREN THEN action','selection',6,'p_selection','lang_sint.py',53),
  ('repetition -> WHILE LPAREN condition RPAREN DO action','repetition',6,'p_repetition','lang_sint.py',57),
  ('repetition -> FROM IDENTIFIER EQUAL INT TO INT DO action','repetition',8,'p_repetition','lang_sint.py',58),
  ('condition -> comparison','condition',1,'p_condition','lang_sint.py',63),
  ('comparison -> expression REL_OP expression','comparison',3,'p_comparison','lang_sint.py',67),
  ('comparison -> comparison LOG_OP comparison','comparison',3,'p_comparison','lang_sint.py',68),
  ('expression -> IDENTIFIER','expression',1,'p_expression','lang_sint.py',71),
  ('expression -> INT','expression',1,'p_expression','lang_sint.py',72),
  ('expression -> STRING','expression',1,'p_expression','lang_sint.py',73),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','lang_sint.py',74),
  ('expression -> expression OPERATOR expression','expression',3,'p_expression','lang_sint.py',75),
  ('action -> assignment SEMICOLON','action',2,'p_action','lang_sint.py',87),
  ('action -> LBRACE body RBRACE','action',3,'p_action','lang_sint.py',88),
  ('assignment -> IDENTIFIER EQUAL expression SEMICOLON','assignment',4,'p_assignment','lang_sint.py',92),
]
